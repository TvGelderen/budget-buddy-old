// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transactions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (user_id, amount, incoming, recurring)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, amount, incoming, recurring
`

type CreateTransactionParams struct {
	UserID    uuid.UUID
	Amount    float64
	Incoming  bool
	Recurring string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.Amount,
		arg.Incoming,
		arg.Recurring,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Incoming,
		&i.Recurring,
	)
	return i, err
}

const getIncomingTransactionslByUserId = `-- name: GetIncomingTransactionslByUserId :many
SELECT id, user_id, amount, incoming, recurring FROM transactions WHERE user_id = $1 AND incoming = 1
`

func (q *Queries) GetIncomingTransactionslByUserId(ctx context.Context, userID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getIncomingTransactionslByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Incoming,
			&i.Recurring,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOutgoingTransactionslByUserId = `-- name: GetOutgoingTransactionslByUserId :many
SELECT id, user_id, amount, incoming, recurring FROM transactions WHERE user_id = $1 AND incoming = 0
`

func (q *Queries) GetOutgoingTransactionslByUserId(ctx context.Context, userID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getOutgoingTransactionslByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Incoming,
			&i.Recurring,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionslByUserId = `-- name: GetTransactionslByUserId :many
SELECT id, user_id, amount, incoming, recurring FROM transactions WHERE user_id = $1
`

func (q *Queries) GetTransactionslByUserId(ctx context.Context, userID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionslByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Incoming,
			&i.Recurring,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
